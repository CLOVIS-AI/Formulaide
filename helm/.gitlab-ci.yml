# Helm helper docker image

helm:docker:build:
  extends: [ .os.docker.build ]
  needs: [ ]
  stage: docker

  variables:
    dockerfile: .gitlab/helm.dockerfile
    context: .gitlab
    image: helm

  interruptible: true

helm:docker:publish:
  extends: [ .os.docker.rename ]
  needs: [ helm:docker:build ]
  stage: deploy

  variables:
    image: helm

  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

  interruptible: true

# Package creation

helm:package:
  image: $CI_REGISTRY_IMAGE/helm:build-$CI_PIPELINE_IID
  stage: build
  needs: [ os.version, helm:docker:build ]

  script:
    - cd helm
    - helm dependency update
    - helm lint
    - helm package --version $project_version --app-version $project_version .

  artifacts:
    when: always
    paths:
      - helm/formulaide-*.tgz
  interruptible: true

helm:publish:
  image: $CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/curlimages/curl:latest
  stage: deploy
  needs:
    - job: helm:package
      artifacts: true
    - job: os.version
      artifacts: true

  script:
    - source version.env || true
    - mv helm/formulaide-*.tgz .
    - >
      curl 
      --request POST 
      --user gitlab-ci-token:$CI_JOB_TOKEN 
      --form "chart=@formulaide-$project_version.tgz" 
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/$channel/charts"

  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        channel: beta
    - if: $CI_COMMIT_TAG
      variables:
        channel: stable
  interruptible: false

# Deployment

.k8s:
  image: $CI_REGISTRY_IMAGE/helm:build-$CI_PIPELINE_IID
  stage: deploy
  dependencies: [ helm:package, os.version ]

  script:
    - source version.env || true
    - kubectl config use-context opensavvy/config:opensavvy-agent
    - >
      helm upgrade --install
      $release
      ./helm/formulaide-$project_version.tgz
      --set config.host=$host
      --set config.replicas=$replicas
      --set config.version=build-$CI_PIPELINE_IID
      --create-namespace=true
      --namespace=$namespace
      --wait
      --atomic

  retry: 1
  interruptible: false

helm:review:
  extends: [ .k8s ]
  needs: [ helm:package, os.version, backend:container ]

  variables:
    release: merge-request-$CI_MERGE_REQUEST_IID
    namespace: formulaide-review
    host: $CI_MERGE_REQUEST_IID.$FORMULAIDE_DEPLOYMENT_URL
    replicas: 1

  environment:
    name: review/$CI_COMMIT_REF_SLUG/app
    url: https://$host/ping
    deployment_tier: development
    on_stop: helm:review-stop
    auto_stop_in: 2 weeks

  rules:
    - if: $FORMULAIDE_DEPLOYMENT_URL == null
      when: never
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "detached"
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merged_result"

helm:review-stop:
  extends: [ .k8s ]
  needs: [ helm:package, os.version, backend:container ]
  variables:
    GIT_STRATEGY: none

  script:
    - source version.env || true
    - kubectl config use-context opensavvy/config:opensavvy-agent
    - helm uninstall merge-request-$CI_MERGE_REQUEST_IID --namespace=formulaide-review

  environment:
    name: review/$CI_COMMIT_REF_SLUG/app
    url: $CI_MERGE_REQUEST_IID.$FORMULAIDE_DEPLOYMENT_URL
    deployment_tier: development
    action: stop

  rules:
    - if: $FORMULAIDE_DEPLOYMENT_URL == null
      when: never
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "detached"
      when: manual
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merged_result"
      when: manual
  allow_failure: true

helm:production:
  extends: [ .k8s ]
  needs: [ backend:container:publish, helm:package, os.version ]
  dependencies: [ helm:package, os.version ]
  stage: deploy

  variables:
    release: production
    namespace: formulaide
    host: $FORMULAIDE_DEPLOYMENT_URL
    replicas: 2

  environment:
    name: production
    url: https://$host

  rules:
    - if: $FORMULAIDE_DEPLOYMENT_URL == null
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  resource_group: "production"
